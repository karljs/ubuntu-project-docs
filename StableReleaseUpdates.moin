||<tablestyle="float:right; font-size: 0.9em; width:40%; background:#F1F1ED; margin: 0 0 1em 1em;" style="padding:0.5em;">'''Contents'''[[BR]][[TableOfContents]]||

Once an Ubuntu release has been completed and published, updates for it are only released under certain circumstances, and must follow a special procedure.

There is an automatically generated list of [http://people.ubuntu.com/~ubuntu-archive/pending-sru.html packages which currently undergo this process].

== Why ==

In contrast to pre-release versions, official releases of Ubuntu are subject to much wider use, and by a different demographic of user.  During development, changes to the distribution primarily affect developers, early adopters and other advanced users, all of whom have elected to use pre-release software at their own risk.

Users of the official release, in contrast, expect a high degree of stability.  They use their Ubuntu system for their day-to-day work, and problems they experience with it can be extremely disruptive.  Many of them are less experienced with Ubuntu and with Linux, and expect a reliable system which does not require their intervention.

Stable release updates are automatically recommended to a very large number of users, and so it is critically important to treat them with great caution.  Therefore, when updates are proposed, they must be accompanied by a strong rationale and present a low risk of regressions.

== When ==

Stable release updates will, in general, only be issued in order to fix '''high-impact bugs'''.  Examples of such bugs include:

 * Bugs which may, under realistic circumstances, directly cause a '''security vulnerability'''. These are done by the security team and are documented at SecurityUpdateProcedures.
 * Bugs which represent '''severe regressions''' from the previous release of Ubuntu
 * Bugs which may, under realistic circumstances, directly cause a '''loss of user data'''
 * Bugs which do not fit under above categories, but (1) have an obviously safe patch and (2) affect an application rather than critical infrastructure packages (like X.org or the kernel).
 * For Long Term Support releases we regularly want to enable new hardware. Such changes are appropriate provided that we can ensure to not affect upgrades on existing hardware. For example, modaliases of newly introduced drivers must not overlap with previously shipped drivers.
 * New versions of commerical software in the Ubuntu partner archive.
 * NOTE: For Universe and Multiverse SRU's '''FTBFS'''(Fails To Build From Source), '''not installable''', and '''segfault on startup''' ( e.g. completely un-usable ) can also be considered.

== Procedure ==

 1. Check that the bug is fixed in the current development release, and its bug report task is "Fix released".

 1. Use ''Nominate for release'' to mark the bug as an SRU candidate for the appropriate Ubuntu releases (e. g. the current LTS and latest stable release), then subscribe [https://launchpad.net/~ubuntu-sru ubuntu-sru] for packages in main/restricted, or [https://launchpad.net/~motu-sru motu-sru] for packages in universe/multiverse.

 1. Update the bug report description and make sure it contains the following information:
  1. A '''statement explaining the impact''' of the bug on users and justification for backporting the fix to the stable release
  1. An explanation of '''how the bug has been addressed''' in the development branch, including the relevant version numbers of packages modified in order to implement the fix.
  1. A minimal '''patch''' applicable to the stable version of the package.  If preparing a patch is likely to be time-consuming, it may be preferable to get a general approval from the SRU team first. See [wiki:Self:SecurityUpdateProcedures#Prepare "Preparing an update"] how to prepare an updated package.
  1. Detailed '''instructions''' how to reproduce the bug. These should allow someone who is not familiar with the affected package to reproduce the bug and verify that the updated package fixes the problem. Please mark this with a line "{{{TEST CASE:}}}".
  1. A '''discussion''' of the regression potential of the patch and how users could get inadvertedly effected.

 1. Prepare an updated package according to [wiki:Self:SecurityUpdateProcedures#Prepare "Preparing an update"].

 1. Upload the fixed package to ''release''`-proposed` with the patch in the bug report, a detailled and user-readable changelog, and no other unrelated changes.

 1. Once the [https://wiki.ubuntu.com/ArchiveAdministration#head-1f27dc12ab1558ec21b31ac44e4c86a87a4cd053 archive admins approve and publish your upload], test the actual binaries in the Ubuntu archive yourself and follow up in the bug report.

 1. Add yourself as a '''bug contact''' for the package in Launchpad, if you are not one already, and '''monitor Launchpad''' for bug reports relating to the update for at least one week.

 In the event of a regression, '''immediately''' notify the [mailto:technical-board@lists.ubuntu.com Ubuntu Technical Board] via email, and ask for help on `#ubuntu-devel` in making urgent contact with a member of the Board. For SRU in universe/multiverse, contact the [mailto:ubuntu-motu@lists.ubuntu.com Universe SRU Team] team or ask for help on `#ubuntu-motu` instead.

== Verification ==

The [https://launchpad.net/~sru-verification SRU verification team] will regularly check open bugs with the `verification-needed` tag and test proposed updates on different hardware to check for inadvertant side effects.

If they discover that your fix is insufficient, or the test case is not sufficient to reproduce the bug, they will:

 1. Set the bug report '''Status: In Progress'''
 1. Describe why the fix was rejected in a comment to the bug report.
 1. Remove the `verification-needed tag`.

The SRU verification team may also discover that your fix is good.  They will:

 1. Modify the `verification-needed` tag to a `verification-done` tag on the bug report.
 1. Describe the general steps taken to verify the package, any special difficulties, and the recommended upload date.

Verification feedback from bug reporters and subscribers is greatly appreciated, too, especially if the update is hardware specific. In this case we consider an update as verified if it has at least two positive and no negative testimonials in the bug report, and the verification team just checks whether the new version still works for the main use cases (to check for major regressions).

[[Anchor(Special)]]
== Special Cases ==

=== New micro releases ===

For some packages it is acceptable to upload new upstream microreleases to stable Ubuntu releases. See /MicroReleaseExceptions for details.  

=== Kernel ===

Because of the way updates to the kernel work, it will follow a slightly different process which is described on KernelUpdates.

=== app-install-data-commercial ===

The app-install-data-commercial source package may be uploaded to add .desktop files for new packages in the commercial repository on archive.canonical.com. This does not require prior approval, and the aging requirement is waived; but it must still go through -proposed, a bug report must still be filed with a debdiff and other relevant information as above, and testing must still be recorded in the bug report.

(This section is based on discussions between MichaelVogt and ColinWatson)

=== Landscape ===

Landscape should be made available to users of 6.06 LTS and other
supported releases for their entire lifetime, which will necessitate
new feature releases.  Being a client/server application, Landscape
needs to maintain some level of synchronization between the client and
server code, to minimize the number of different version interactions.

=== tzdata ===

The tzdata package is updated to reflect changes in timezones or daylight saving policies. The verification is done with the "zdump" utility. The first timezone that gets changed in the updated package is dumped with "zdump -v $region/$timezone_that_changed" (this needed to be greped for in /usr/share/zoneinfo/). This is compared to the same output after the updated package got installed. If those are different the verification is considered done.

== Examples ==

As a reference, see [https://launchpad.net/ubuntu/+source/cpio/+bug/59228 bug #59228] for an idea of how the SRU process works.

== Links ==

Note that `ubuntu-sru`'s subscribed bugs page may not be sufficient to catch bugs that (a) are Fix Released in the current development release and (b) have been nominated but not approved for stable releases. See the following links:

 * [https://bugs.edge.launchpad.net/ubuntu/dapper/+nominations?field.subscriber=ubuntu-sru Dapper]
 * [https://bugs.edge.launchpad.net/ubuntu/edgy/+nominations?field.subscriber=ubuntu-sru Edgy]
 * [https://bugs.edge.launchpad.net/ubuntu/feisty/+nominations?field.subscriber=ubuntu-sru Feisty]
 * [https://bugs.edge.launchpad.net/ubuntu/gutsy/+nominations?field.subscriber=ubuntu-sru Gutsy]

=== Useful links for motu-sru ===

 * [https://bugs.launchpad.net/~motu-sru/ Bugs subscribed by motu-sru]
 * List of bugs which needs verification for [http://tinyurl.com/3bgr3y Dapper], [http://tinyurl.com/3akl7x Edgy], [http://tinyurl.com/3b2u78 Feisty], [http://tinyurl.com/yr7wsu Gutsy]
 * List of verified bugs for [http://tinyurl.com/25f6dk Dapper], [http://tinyurl.com/25f6dk Edgy], [http://tinyurl.com/yu5ldn Feisty], [http://tinyurl.com/yuk7s7 Gutsy]

----
CategoryProcess
